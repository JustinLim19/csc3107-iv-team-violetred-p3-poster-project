---
title: "Untitled"
format: html
---

```{r}
#| label: setup
#| include: false

# Load necessary libraries
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggrepel)
library(sf)
library(tibble)
library(dplyr)
library(geojsonsf)
library(viridis)  # For color-blind friendly palette
library(ggspatial)  # For north arrow and scale bar
```

```{r}
# Load the dataset
file_path <- "full_year_weather_data.xlsx"
weather_data <- read_excel(file_path)
```

```{r}
# Add the year to the date entries and convert to datetime format
weather_data <- weather_data %>%
  mutate(Date = as.Date(paste(Date, "2023"), format = "%d %b %Y"))

# Convert Daily Rainfall Total to numeric, forcing non-numeric values to NA
weather_data <- weather_data %>%
  mutate(`Daily Rainfall Total (mm)` = as.numeric(`Daily Rainfall Total (mm)`))

# Remove rows with NA values in the Daily Rainfall Total column
weather_data <- weather_data %>%
  filter(!is.na(`Daily Rainfall Total (mm)`))
```

```{r}
# View the cleaned data
head(weather_data)
```

```{r}
# Extract key data points
hottest_day <- weather_data %>%
  filter(`Mean Temperature (°C)` == max(`Mean Temperature (°C)`, na.rm = TRUE))

coolest_day <- weather_data %>%
  filter(`Mean Temperature (°C)` == min(`Mean Temperature (°C)`, na.rm = TRUE))

wettest_month <- weather_data %>%
  group_by(month = format(Date, "%Y-%m")) %>%
  summarise(total_rainfall = sum(`Daily Rainfall Total (mm)`, na.rm = TRUE)) %>%
  filter(total_rainfall == max(total_rainfall, na.rm = TRUE))

driest_month <- weather_data %>%
  group_by(month = format(Date, "%Y-%m")) %>%
  summarise(total_rainfall = sum(`Daily Rainfall Total (mm)`, na.rm = TRUE)) %>%
  filter(total_rainfall == min(total_rainfall, na.rm = TRUE))

strongest_wind_gust <- weather_data %>%
  filter(`Max Wind Speed (km/h)` == max(`Max Wind Speed (km/h)`, na.rm = TRUE))

# Display the extracted data points
list(hottest_day, coolest_day, wettest_month, driest_month, strongest_wind_gust)
```

```{r}
location_coords <- data.frame(
  Location = c("Woodlands", "Ang Mo Kio", "Pulau Ubin", "Pasir Panjang", "Newton", "Kallang", "East Coast Parkway"),
  Longitude = c(103.78, 103.85, 103.95, 103.76, 103.83, 103.87, 103.94),
  Latitude = c(1.43, 1.37, 1.41, 1.27, 1.32, 1.30, 1.30)
)

events_data <- tibble(
  Location = c("Woodlands", "Ang Mo Kio", "Pulau Ubin", "Pasir Panjang", "Newton", "Kallang", "East Coast Parkway"),
  Event = c(
    "Wettest (569.4mm)", "Hottest (37°C)", "Coolest (26°C)",
    "Strongest Wind (85 km/h)", "Coolest (21.2°C)", "Wettest (225.5mm)",
    "Hottest (29.8°C)"
  ),
  Color = c("blue", "red", "cyan", "green", "purple", "blue", "orange"),
  Date = c("December", "May 13", "January", "May 16", "March 1", "February 28", "May"),
  Type = c("Rainfall", "Temperature", "Temperature", "Wind Speed", "Temperature", "Rainfall", "Temperature")
)

location_coords <- location_coords %>%
  left_join(events_data, by = "Location")

event_colors <- c(
  "Coolest (21.2°C)" = "purple",
  "Hottest (37°C)" = "red",
  "Strongest Wind (85 km/h)" = "green",
  "Coolest (26°C)" = "cyan",
  "Hottest (29.8°C)" = "orange",
  "Wettest (569.4mm)" = "blue",
  "Wettest (225.5mm)" = "blue"
)

# Read the GeoJSON file
singapore_map <- geojson_sf("sg.geojson")

# Plotting the improved visualization with Singapore map outline
ggplot() +
  geom_sf(data = singapore_map, fill = "white", color = "black", alpha = 0.3) +
  geom_point(data = location_coords, aes(x = Longitude, y = Latitude, color = Event), size = 5) +
  geom_label_repel(
    data = location_coords, aes(x = Longitude, y = Latitude, label = paste(Location, "\n", Event, "\n", Date)),
    size = 2.5, box.padding = 0.35, point.padding = 0.3, segment.color = "grey50",
    nudge_y = 0.02, nudge_x = 0.02, max.overlaps = Inf, fill = "white"
  ) +
  scale_color_manual(values = event_colors, name = "Weather Events") +
  theme_minimal() +
  labs(title = "Weather Extremes in Singapore (2023)", x = "Longitude", y = "Latitude") +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",
    legend.margin = margin(t = 0, r = 20, b = 0, l = 20),
    plot.margin = unit(c(1, 1, 1, 1), "cm"),
    text = element_text(size = 12)
  ) +
  guides(color = guide_legend(ncol = 2, byrow = TRUE))
```
