---
title: "Weather Extremes in Singapore 2023"
author: "Team Violetred"
date: "2024-05-24"
format: html
---

## Introduction
This report analyzes the weather extremes in Singapore for the year 2023, highlighting significant weather conditions across different regions. 

The code below requires the following packages:

```{r}
#| label: setup
#| include: false

# Load necessary libraries
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggrepel)
library(sf)
library(tibble)
library(dplyr)
library(geojsonsf)
library(viridis) # For color-blind friendly palette
library(ggspatial) # For north arrow and scale bar
```

```{r}
# Load the dataset
file_path <- "full_year_weather_data.xlsx"
weather_data <- read_excel(file_path)
```

```{r}
# Add the year to the date entries and convert to datetime format
weather_data <- weather_data %>%
  mutate(Date = as.Date(paste(Date, "2023"), format = "%d %b %Y"))

# Convert Daily Rainfall Total to numeric, forcing non-numeric values to NA
weather_data <- weather_data %>%
  mutate(`Daily Rainfall Total (mm)` = as.numeric(`Daily Rainfall Total (mm)`))

# Remove rows with NA values in the Daily Rainfall Total column
weather_data <- weather_data %>%
  filter(!is.na(`Daily Rainfall Total (mm)`))
```

```{r}
# View the cleaned data
head(weather_data)
```

```{r}
# Extract key data points
hottest_day <- weather_data %>%
  filter(`Mean Temperature (°C)` == max(`Mean Temperature (°C)`, na.rm = TRUE))

coolest_day <- weather_data %>%
  filter(`Mean Temperature (°C)` == min(`Mean Temperature (°C)`, na.rm = TRUE))

wettest_month <- weather_data %>%
  group_by(month = format(Date, "%Y-%m")) %>%
  summarise(total_rainfall = sum(`Daily Rainfall Total (mm)`, na.rm = TRUE)) %>%
  filter(total_rainfall == max(total_rainfall, na.rm = TRUE))

driest_month <- weather_data %>%
  group_by(month = format(Date, "%Y-%m")) %>%
  summarise(total_rainfall = sum(`Daily Rainfall Total (mm)`, na.rm = TRUE)) %>%
  filter(total_rainfall == min(total_rainfall, na.rm = TRUE))

strongest_wind_gust <- weather_data %>%
  filter(`Max Wind Speed (km/h)` == max(`Max Wind Speed (km/h)`, na.rm = TRUE))

# Display the extracted data points
list(hottest_day, coolest_day, wettest_month, driest_month, strongest_wind_gust)
```

```{r}
# Define location coordinates and events data
location_coords <- data.frame(
  Location = c("Woodlands", "Ang Mo Kio", "Pulau Ubin", "Pasir Panjang", "Newton", "Kallang", "East Coast Parkway"),
  Longitude = c(103.78, 103.85, 103.95, 103.76, 103.83, 103.87, 103.94),
  Latitude = c(1.43, 1.37, 1.41, 1.27, 1.32, 1.30, 1.30)
)

events_data <- tibble(
  Location = c("Woodlands", "Ang Mo Kio", "Pulau Ubin", "Pasir Panjang", "Newton", "Kallang", "East Coast Parkway"),
  Event = c(
    "Wettest (569.4mm)", "Hottest (37°C)", "Coolest (26°C)",
    "Strongest Wind (85 km/h)", "Coolest (21.2°C)", "Wettest (225.5mm)",
    "Hottest (29.8°C)"
  ),
  Date = c("December", "May 13", "January", "May 16", "March 1", "February 28", "May"),
  Type = c("Rainfall", "Temperature (Hot)", "Temperature (Cool)", "Wind Speed", "Temperature (Cool)", "Rainfall", "Temperature (Hot)"),
  Magnitude = c(569.4, 37, 26, 85, 21.2, 225.5, 29.8)
)

location_coords <- location_coords %>%
  left_join(events_data, by = "Location")

# Custom color palette
event_colors <- c(
  "Rainfall" = "#5ab4ac",
  "Temperature (Cool)" = "#4575b4",
  "Temperature (Hot)" = "#d73027",
  "Wind Speed" = "#91bfdb"
)

# Read the GeoJSON file
singapore_map <- geojson_sf("sg.geojson")

# Create the plot
ggplot() +
  # Base map
  geom_sf(data = singapore_map, fill = "ivory", color = "gray80", size = 0.2) +

  # Events
  geom_point(
    data = location_coords,
    aes(x = Longitude, y = Latitude, color = Type, size = Magnitude),
    alpha = 0.8
  ) +

  # Labels
  geom_label_repel(
    data = location_coords,
    aes(
      x = Longitude, y = Latitude,
      label = paste0(Location, "\n", Event, "\n", Date)
    ),
    size = 2.5, box.padding = 0.5, point.padding = 0.3,
    segment.color = "grey50", force = 10, max.overlaps = Inf,
    fill = "white", color = "black"
  ) +

  # Scales
  scale_color_manual(values = event_colors, name = "Event Type") +
  scale_size_continuous(range = c(3, 10), name = "Magnitude") +

  # Theme and labels
  theme_minimal() +
  labs(
    title = "Weather Extremes in Singapore (2023)",
    subtitle = "Highlighting the most significant weather events across different locations",
    x = "Longitude",
    y = "Latitude",
    caption = "Map Source: Singapore GeoJSON"
  ) +

  # Adjust theme elements
  theme(
    plot.title = element_text(size = 16, face = "bold", margin = margin(b = 10)),
    plot.subtitle = element_text(size = 12, color = "gray30", margin = margin(b = 20)),
    legend.position = "right",
    legend.box = "vertical",
    legend.margin = margin(t = 10, r = 0, b = 10, l = 0),
    plot.margin = unit(c(1, 1, 1, 1), "cm"),
    text = element_text(size = 10),
    panel.grid = element_blank(),
    axis.text = element_blank(),
    axis.title = element_blank()
  ) +

  # Guides
  guides(
    color = guide_legend(override.aes = list(size = 5)),
    size = guide_legend(override.aes = list(color = "gray30"))
  ) +

  # Add north arrow and scale bar
  annotation_north_arrow(
    location = "bl", which_north = "true",
    pad_x = unit(0.0, "in"), pad_y = unit(0.0, "in"),
    style = north_arrow_minimal
  ) +
  annotation_scale(location = "bl", width_hint = 0.3, pad_x = unit(0.0, "in"), pad_y = unit(0.0, "in")) +

  # Set coordinate limits
  coord_sf(xlim = c(103.6, 104.1), ylim = c(1.15, 1.5), expand = FALSE)
```

```{r}
# Load the population data from the Excel file
population_data_excel_path <- 'respopagesexfa2023e.xlsx'
population_data <- read_excel(population_data_excel_path, skip = 2)

# Display the first few rows of the dataset
head(population_data)

# Rename columns
population_data <- population_data %>%
  rename(PA = `Planning Area`, Pop = `2023`)

# Convert Pop column to numeric, coercing any non-numeric values to NA
population_data <- population_data %>%
  mutate(Pop = as.numeric(Pop))

# Display the cleaned and renamed data
head(population_data)

# Aggregate the population data by planning area (PA)
population_aggregated <- population_data %>%
  group_by(PA) %>%
  summarise(Pop = sum(Pop, na.rm = TRUE))
```

```{r}
# Load the GeoJSON file
geojson_path <- 'sg.geojson'
singapore_map <- st_read(geojson_path)

# Merge population data with geographical data
singapore_map <- singapore_map %>%
  left_join(population_aggregated, by = c("planning_area" = "PA"))

# Plot the population density heatmap
ggplot() +
  geom_sf(data = singapore_map, aes(fill = Pop), color = "gray80", size = 0.2) +
  # Use viridis palette for perceptual uniformity and accessibility
  scale_fill_viridis_c(option = "plasma", name = "Population Count") +
  theme_minimal() +
  labs(title = "Population Density in Singapore (2023)",
       subtitle = "Aggregated by Planning Area",
       x = "Longitude",
       y = "Latitude",
       caption = "Source: Singapore Department of Statistics") +
  theme(plot.title = element_text(size = 16, face = "bold", margin = margin(b = 10)),
        plot.subtitle = element_text(size = 12, color = "gray30", margin = margin(b = 20)),
        legend.position = "right",
        legend.box = "vertical",
        legend.margin = margin(t = 10, r = 0, b = 10, l = 0),
        plot.margin = unit(c(1, 1, 1, 1), "cm"),
        text = element_text(size = 10),
        panel.grid = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank())
```
